#!/bin/bash

DATE=$(date +"%Y%m%d-%H%M")
TELEGRAM=Telegram/telegram
CHANNEL_ID=-1001261511799

make_build(){
	print "Making kernel dtb..." green
	if [ $TOOLCHAIN == clang ]; then
		export KBUILD_COMPILER_STRING=$(clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
		export PATH="/usr/lib/ccache:$PATH"
		export PATH="$(pwd)/clang/bin:${PATH}"
		sendInfo	"<b>===============================</b>" \
        	"<b>Start Building :</b> <code>Preserver Kernel 4.19</code>" \
        	"<b>Source Branch :</b> <code>$(git rev-parse --abbrev-ref HEAD)</code>" \
                "<b>Toolchain :</b> <code>$KBUILD_COMPILER_STRING</code>" \
                "<b>===============================</b>"
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out \
                      ARCH=arm64 \
                      CC=clang \
                      HOSTCC=clang \
                      AR=llvm-ar \
                      NM=llvm-nm \
                      OBJCOPY=llvm-objcopy \
                      OBJDUMP=llvm-objdump \
                      STRIP=llvm-strip \
                      CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
                      CROSS_COMPILE=aarch64-linux-gnu-
	else
		export CROSS_COMPILE=$(pwd)/gcc-arm64/bin/aarch64-elf-
		export CROSS_COMPILE_ARM32=$(pwd)/gcc-arm32/bin/arm-eabi-
		export KBUILD_COMPILER_STRING=$(gcc-arm64/bin/aarch64-elf-gcc --version | head -n 1)
                export PATH="/usr/lib/ccache:$PATH"
		sendInfo	"<b>===============================</b>" \
        	"<b>Start Building :</b> <code>Preserver Kernel 4.19</code>" \
        	"<b>Source Branch :</b> <code>$(git rev-parse --abbrev-ref HEAD)</code>" \
                "<b>Toolchain :</b> <code>$KBUILD_COMPILER_STRING</code>" \
                "<b>===============================</b>"
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out ARCH=arm64
	fi
}

make_clean(){
	rm -rf out
}

sendInfo() {
  "${TELEGRAM}" -c "${CHANNEL_ID}" -H \
      "$(
          for POST in "${@}"; do
              echo "${POST}"
          done
      )"
}

sendKernel() {
  "${TELEGRAM}" -f "$(echo "$(pwd)"/*.zip)" \
  -c "${CHANNEL_ID}" -H \
      "# <code>Jasway 4.4 Preserver</code> \
	  Build ready :D"
}

send_msg(){
	print "${1}" green
#	curl -s -X POST https://api.telegram.org/bot"${bot_token}"/sendMessage \
#		-d parse_mode="Markdown" \
#		-d chat_id="${chat_id}" \
#		-d text="${1}"
}

send_file(){
	print "Sending file..." green
	curl -F chat_id="${chat_id}" \
		-F caption="Build Berhasil! | Nobita | #funproject" \
		-F document=@"${1}" \
		 https://api.telegram.org/bot"${bot_token}"/sendDocument
}

mkzip(){
	print "Generating zip file..." green

	if [ -f $(pwd)/out/arch/arm64/boot/Image.gz-dtb ]; then
		cp $(pwd)/out/arch/arm64/boot/Image.gz-dtb  Anykerne-3
		cd Anykerne-3
		zip -r9 ../$1 * -x .git README.md *placeholder
		cd ..
		print "Hogaya build ab nacho" green
	else
		send_msg "ah sheet here we go again, Build error"
		print "Build error !" red
		exit 1
	fi
}

print(){
	echo ""
	case ${2} in
		"red")
		echo -e "\033[31m $1 \033[0m";;
		"green")
		echo -e "\033[32m $1 \033[0m";;
		*)
		echo $1
		;;
	esac
}

gen_toolchain(){
	print "Cloning Telegram files..." green
	git clone --depth=1 https://github.com/Prashant1873/telegram Telegram
	print "Cloning Anykernel files..." green
	git clone https://github.com/Prashant1873/Anykerne-3.git -b new Anykerne-3

	print "Cloning toolchain files..." green
	if [ $TOOLCHAIN == "clang" ]
	then
		git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
	else
		git clone -q --depth=1 https://github.com/mvaisakh/gcc-arm64 -b  gcc-master gcc-arm64
		git clone -q --depth=1 https://github.com/mvaisakh/gcc-arm -b gcc-master gcc-arm32
	fi
		git clone --depth=1 https://github.com/osm0sis/AnyKernel3 -b master anykernel
}

build(){

	export type="${1} ${2} ${3}"

	make_clean

	if [ $2 == "-oldcam" ]
	then
		make_build "${1}_defconfig"
	else
		make_build "${1}_defconfig"
	fi
		mkzip "$KERNELNAME-${1}${2}${3}-$DATE.zip"
	if [ -f *.zip ];
    then
	END=$(date +"%s")
	DIFF=$(( END - START ))
	sendKernel
    sendInfo "<b>BUILD took $((DIFF / 60))m:$((DIFF % 60))s </b>" \
	         "=================================" \
			 "<b>Linux Version :</b> <code>$(cat < out/.config | grep Linux/arm64 | cut -d " " -f3)</code>" \
             "<b>Build Date :</b> <code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>" \
	         " <b>Most recent changes are:</b> $(git log --pretty=format:'%h : %s' -15 --abbrev=7 --first-parent)"
	sendInfo "================================="		 
	print "BUILD took $((DIFF / 60))m:$((DIFF % 60))s | Most recent changes are : \n $(git log --pretty=format:'%h : %s' -15 --abbrev=7 --first-parent)" green
    mv *.zip allbuilds
    fi
}
